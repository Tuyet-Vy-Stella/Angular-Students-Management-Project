{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet SubjectListComponent = class SubjectListComponent {\n  //Focus Input\n  FocusInput() {\n    this.inputEl.nativeElement.focus();\n  }\n  constructor(SubjectService, title) {\n    this.SubjectService = SubjectService;\n    this.title = title;\n    this.subjectList = [];\n    this.name = '';\n    this.nameSearchText = '';\n    this.id = '';\n  }\n  ngOnInit() {\n    this.SubjectService.getListSubject().subscribe(res => {\n      this.subjectList = res;\n      console.log(res);\n    });\n  }\n  /* Handle Create */\n  handleCreate(name) {\n    this.SubjectService.createSubject(name).subscribe(res => {\n      this.subjectList = [...this.subjectList, res];\n    });\n  }\n  /* Filter by Id */\n  handleFilter(id) {\n    if (this.id === '') {\n      this.SubjectService.getListSubject().subscribe(res => {\n        this.subjectList = res;\n      });\n    }\n    this.SubjectService.getSubjectById(id).subscribe(res => {\n      this.subjectList = [res];\n    });\n  }\n  /* Filter by Name */\n  handleFilterByName(name) {\n    this.SubjectService.getListSubject().subscribe(res => {\n      this.subjectList = res.filter(s => {\n        return s.name.toLowerCase().includes(name.toLowerCase());\n      });\n    });\n  }\n  handleUpdate(name) {\n    this.SubjectService.setNameEdit(name);\n  }\n  onSelect(event) {\n    const selectedValue = event.target.value;\n    if (selectedValue === 'All') {\n      this.SubjectService.getListSubject().subscribe(res => {\n        this.subjectList = res;\n      });\n    } else {\n      this.SubjectService.getListSubject().subscribe(res => {\n        this.subjectList = res.slice(0, +selectedValue);\n      });\n    }\n  }\n};\n__decorate([ViewChild('createInput')], SubjectListComponent.prototype, \"inputEl\", void 0);\nSubjectListComponent = __decorate([Component({\n  selector: 'app-subject-list',\n  templateUrl: './subject-list.component.html',\n  styleUrls: ['./subject-list.component.scss']\n})], SubjectListComponent);\nexport { SubjectListComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,SAAS,QAA4B,eAAe;AAQjE,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAO/B;EACAC,UAAU;IACR,IAAI,CAACC,OAAO,CAACC,aAAa,CAACC,KAAK,EAAE;EACpC;EAEAC,YAAoBC,cAA8B,EAAUC,KAAa;IAArD,mBAAc,GAAdD,cAAc;IAA0B,UAAK,GAALC,KAAK;IAXjE,gBAAW,GAAS,EAAE;IACtB,SAAI,GAAU,EAAE;IAChB,mBAAc,GAAU,EAAE;IAC1B,OAAE,GAAO,EAAE;EAQgE;EAE3EC,QAAQ;IACN,IAAI,CAACF,cAAc,CAACG,cAAc,EAAE,CAACC,SAAS,CAACC,GAAG,IAAG;MACnD,IAAI,CAACC,WAAW,GAAGD,GAAG;MACtBE,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;IAGlB,CAAC,CAAC;EACJ;EAEA;EACAI,YAAY,CAACC,IAAW;IACtB,IAAI,CAACV,cAAc,CAACW,aAAa,CAACD,IAAI,CAAC,CAACN,SAAS,CAACC,GAAG,IAAG;MACpD,IAAI,CAACC,WAAW,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,EAAED,GAAG,CAAC;IAEjD,CAAC,CAAC;EAGJ;EAEA;EACAO,YAAY,CAACC,EAAS;IACpB,IAAG,IAAI,CAACA,EAAE,KAAK,EAAE,EAAG;MAClB,IAAI,CAACb,cAAc,CAACG,cAAc,EAAE,CAACC,SAAS,CAACC,GAAG,IAAG;QACnD,IAAI,CAACC,WAAW,GAAGD,GAAG;MAGxB,CAAC,CAAC;;IAEJ,IAAI,CAACL,cAAc,CAACc,cAAc,CAACD,EAAE,CAAC,CAACT,SAAS,CAACC,GAAG,IAAG;MACrD,IAAI,CAACC,WAAW,GAAG,CAACD,GAAG,CAAC;IAE1B,CAAC,CAAC;EACJ;EAEA;EACAU,kBAAkB,CAACL,IAAW;IAC5B,IAAI,CAACV,cAAc,CAACG,cAAc,EAAE,CAACC,SAAS,CAACC,GAAG,IAAG;MACnD,IAAI,CAACC,WAAW,GAAGD,GAAG,CAACW,MAAM,CAAEC,CAAK,IAAI;QACtC,OAAOA,CAAC,CAACP,IAAI,CAACQ,WAAW,EAAE,CAACC,QAAQ,CAACT,IAAI,CAACQ,WAAW,EAAE,CAAC;MACvD,CAAC,CAAC;IAEP,CAAC,CAAC;EAEJ;EAEAE,YAAY,CAACV,IAAW;IACpB,IAAI,CAACV,cAAc,CAACqB,WAAW,CAACX,IAAI,CAAC;EACzC;EAEAY,QAAQ,CAACC,KAAU;IACjB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACxC,IAAGF,aAAa,KAAK,KAAK,EAAC;MACzB,IAAI,CAACxB,cAAc,CAACG,cAAc,EAAE,CAACC,SAAS,CAACC,GAAG,IAAG;QACpD,IAAI,CAACC,WAAW,GAAGD,GAAG;MAGvB,CAAC,CAAC;KACH,MAAK;MACJ,IAAI,CAACL,cAAc,CAACG,cAAc,EAAE,CAACC,SAAS,CAACC,GAAG,IAAG;QACnD,IAAI,CAACC,WAAW,GAAGD,GAAG,CAACsB,KAAK,CAAC,CAAC,EAAC,CAACH,aAAa,CAAC;MAG/C,CAAC,CAAC;;EAIP;CAGD;AA9E2BI,YAAzBnC,SAAS,CAAC,aAAa,CAAC,qDAAsB;AALpCC,oBAAoB,eALhCF,SAAS,CAAC;EACTqC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWrC,oBAAoB,CAmFhC;SAnFYA,oBAAoB","names":["Component","ViewChild","SubjectListComponent","FocusInput","inputEl","nativeElement","focus","constructor","SubjectService","title","ngOnInit","getListSubject","subscribe","res","subjectList","console","log","handleCreate","name","createSubject","handleFilter","id","getSubjectById","handleFilterByName","filter","s","toLowerCase","includes","handleUpdate","setNameEdit","onSelect","event","selectedValue","target","value","slice","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\OneDrive - Industrial University of HoChiMinh City\\Desktop\\Angular-Students-Management-Project\\src\\app\\subject\\subject-list\\subject-list.component.ts"],"sourcesContent":["import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { SubjectService } from 'src/app/subject/service/subject.service';\r\n\r\n@Component({\r\n  selector: 'app-subject-list',\r\n  templateUrl: './subject-list.component.html',\r\n  styleUrls: ['./subject-list.component.scss']\r\n})\r\nexport class SubjectListComponent implements OnInit {\r\n  subjectList:any[] = [];\r\n  name:string = '';\r\n  nameSearchText:string = '';\r\n  id:any = '';\r\n  @ViewChild('createInput') inputEl!: ElementRef;\r\n\r\n  //Focus Input\r\n  FocusInput(){\r\n    this.inputEl.nativeElement.focus();\r\n  }\r\n  \r\n  constructor(private SubjectService: SubjectService, private title: Tittle){}\r\n\r\n  ngOnInit() {\r\n    this.SubjectService.getListSubject().subscribe(res => {\r\n      this.subjectList = res;\r\n      console.log(res);\r\n      \r\n      \r\n    })\r\n  }\r\n\r\n  /* Handle Create */\r\n  handleCreate(name:string){\r\n    this.SubjectService.createSubject(name).subscribe(res => {\r\n        this.subjectList = [...this.subjectList, res];\r\n        \r\n    })\r\n\r\n\r\n  }\r\n\r\n  /* Filter by Id */\r\n  handleFilter(id:number){\r\n    if(this.id === '' ) {\r\n      this.SubjectService.getListSubject().subscribe(res => {\r\n        this.subjectList = res;\r\n        \r\n        \r\n      }) \r\n    }\r\n    this.SubjectService.getSubjectById(id).subscribe(res => {\r\n      this.subjectList = [res];\r\n      \r\n    })\r\n  }\r\n\r\n  /* Filter by Name */\r\n  handleFilterByName(name:string){\r\n    this.SubjectService.getListSubject().subscribe(res => {\r\n      this.subjectList = res.filter((s:any) => {\r\n        return s.name.toLowerCase().includes(name.toLowerCase())\r\n         })\r\n\r\n    })\r\n    \r\n  }\r\n\r\n  handleUpdate(name:string){\r\n      this.SubjectService.setNameEdit(name);\r\n  }\r\n\r\n  onSelect(event: any) {\r\n    const selectedValue = event.target.value;\r\n    if(selectedValue === 'All'){\r\n      this.SubjectService.getListSubject().subscribe(res => {\r\n       this.subjectList = res;\r\n       \r\n        \r\n      })\r\n    }else {\r\n      this.SubjectService.getListSubject().subscribe(res => {\r\n        this.subjectList = res.slice(0,+selectedValue);\r\n        \r\n         \r\n       })\r\n    }\r\n\r\n\r\n  }\r\n\r\n \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}