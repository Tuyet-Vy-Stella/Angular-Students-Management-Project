{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nlet AuthInterceptor = class AuthInterceptor {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n  }\n  intercept(req, next) {\n    const token = this.cookieService.get('token');\n    console.log(token);\n    if (token) {\n      const headers = req.headers.set('Authorization', `Bearer ${token}`);\n      req = req.clone({\n        headers\n      });\n      console.log(req);\n    }\n    return next.handle(req);\n  }\n};\nAuthInterceptor = __decorate([Injectable()], AuthInterceptor);\nexport { AuthInterceptor };","map":{"version":3,"mappings":";AAAA,SAAQA,UAAU,QAAO,eAAe;AAMjC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAC1BC,YAAoBC,aAA6B;IAA7B,kBAAa,GAAbA,aAAa;EACjC;EAEAC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACJ,aAAa,CAACK,GAAG,CAAC,OAAO,CAAC;IAC7CC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAElB,IAAGA,KAAK,EAAC;MACP,MAAMI,OAAO,GAAGN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE,CAAC;MACnEF,GAAG,GAAGA,GAAG,CAACQ,KAAK,CAAC;QAAEF;MAAO,CAAG,CAAC;MAC7BF,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;;IAElB,OAAOC,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;EACzB;CACD;AAfYJ,eAAe,eAD3BD,UAAU,EAAE,GACAC,eAAe,CAe3B;SAfYA,eAAe","names":["Injectable","AuthInterceptor","constructor","cookieService","intercept","req","next","token","get","console","log","headers","set","clone","handle"],"sourceRoot":"","sources":["C:\\OneDrive - Industrial University of HoChiMinh City\\Desktop\\Angular-Students-Management-Project\\src\\app\\auth\\auth.interceptor.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {CookieService} from \"ngx-cookie-service\";\r\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor{\r\n  constructor(private cookieService : CookieService) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = this.cookieService.get('token');\r\n    console.log(token);\r\n\r\n    if(token){\r\n      const headers = req.headers.set('Authorization', `Bearer ${token}`);\r\n      req = req.clone({ headers  });\r\n      console.log(req);\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}